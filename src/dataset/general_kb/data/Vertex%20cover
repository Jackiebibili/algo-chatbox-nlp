In graph theory, a vertex cover (sometimes node cover) of a graph is a set of vertices that includes at least one endpoint of every edge of the graph. 

In computer science, the problem of finding a minimum vertex cover is a classical optimization problem. It is NP-hard, so it cannot be solved by a polynomial-time algorithm if P ≠ NP. Moreover, it is hard to approximate – it cannot be approximated up to a factor smaller than 2 if the unique games conjecture is true. On the other hand, it has several simple 2-factor approximations. It is a typical example of an NP-hard optimization problem that has an approximation algorithm. Its decision version, the vertex cover problem, was one of Karp's 21 NP-complete problems and is therefore a classical NP-complete problem in computational complexity theory. Furthermore, the vertex cover problem is fixed-parameter tractable and a central problem in parameterized complexity theory. 

The minimum vertex cover problem can be formulated as a half-integral, linear program whose dual linear program is the maximum matching problem. 

Vertex cover problems have been generalized to hypergraphs, see Vertex cover in hypergraphs. 

## Definition

Formally, a vertex cover <math-expression>V'</math-expression> of an undirected graph <math-expression>G=(V,E)</math-expression> is a subset of <math-expression>V</math-expression> such that <math-expression>uv\in E\Rightarrow u\in V'\lor v\in V'</math-expression>, that is to say it is a set of vertices <math-expression>V'</math-expression> where every edge has at least one endpoint in the vertex cover <math-expression>V'</math-expression>. Such a set is said to cover the edges of <math-expression>G</math-expression>. The upper figure shows two examples of vertex covers, with some vertex cover <math-expression>V'</math-expression> marked in red. 

A minimum vertex cover is a vertex cover of smallest possible size. The vertex cover number <math-expression>\tau </math-expression> is the size of a minimum vertex cover, i.e. <math-expression>\tau =|V'|</math-expression>. The lower figure shows examples of minimum vertex covers in the previous graphs. 

### Examples

  * The set of all vertices is a vertex cover.
  * The endpoints of any maximal matching form a vertex cover.
  * The complete bipartite graph <math-expression>K_{m,n}</math-expression> has a minimum vertex cover of size <math-expression>\tau (K_{m,n})=\min\{\,m,n\,\}</math-expression>.

### Properties

  * A set of vertices is a vertex cover if and only if its complement is an independent set.
  * Consequently, the number of vertices of a graph is equal to its minimum vertex cover number plus the size of a maximum independent set (Gallai 1959).

## Computational problem

The minimum vertex cover problem is the optimization problem of finding a smallest vertex cover in a given graph. 

    INSTANCE: Graph <math-expression>G</math-expression>
    OUTPUT: Smallest number <math-expression>k</math-expression> such that <math-expression>G</math-expression> has a vertex cover of size <math-expression>k</math-expression>.

If the problem is stated as a decision problem, it is called the vertex cover problem: 

    INSTANCE: Graph <math-expression>G</math-expression> and positive integer <math-expression>k</math-expression>.
    QUESTION: Does <math-expression>G</math-expression> have a vertex cover of size at most <math-expression>k</math-expression>?

The vertex cover problem is an NP-complete problem: it was one of Karp's 21 NP-complete problems. It is often used in computational complexity theory as a starting point for NP-hardness proofs. 

### ILP formulation

Assume that every vertex has an associated cost of <math-expression>c(v)\geq 0</math-expression>. The (weighted) minimum vertex cover problem can be formulated as the following integer linear program (ILP).

    

This ILP belongs to the more general class of ILPs for covering problems. The integrality gap of this ILP is <math-expression>2</math-expression>, so its relaxation (allowing each variable to be in the interval from 0 to 1, rather than requiring the variables to be only 0 or 1) gives a factor-<math-expression>2</math-expression> approximation algorithm for the minimum vertex cover problem. Furthermore, the linear programming relaxation of that ILP is half-integral, that is, there exists an optimal solution for which each entry <math-expression>x_{v}</math-expression> is either 0, 1/2, or 1. A 2-approximate vertex cover can be obtained from this fractional solution by selecting the subset of vertices whose variables are nonzero. 

### Exact evaluation

The decision variant of the vertex cover problem is NP-complete, which means it is unlikely that there is an efficient algorithm to solve it exactly for arbitrary graphs. NP-completeness can be proven by reduction from 3-satisfiability or, as Karp did, by reduction from the clique problem. Vertex cover remains NP-complete even in cubic graphs and even in planar graphs of degree at most 3.

For bipartite graphs, the equivalence between vertex cover and maximum matching described by Kőnig's theorem allows the bipartite vertex cover problem to be solved in polynomial time. 

For tree graphs, an algorithm finds a minimal vertex cover in polynomial time by finding the first leaf in the tree and adding its parent to the minimal vertex cover, then deleting the leaf and parent and all associated edges and continuing repeatedly until no edges remain in the tree. 

#### Fixed-parameter tractability

An exhaustive search algorithm can solve the problem in time 2n, where k is the size of the vertex cover. Vertex cover is therefore fixed-parameter tractable, and if we are only interested in small k, we can solve the problem in polynomial time. One algorithmic technique that works here is called bounded search tree algorithm, and its idea is to repeatedly choose some vertex and recursively branch, with two cases at each step: place either the current vertex or all its neighbours into the vertex cover. The algorithm for solving vertex cover that achieves the best asymptotic dependence on the parameter runs in time <math-expression>O(1.2738^{k}+(k\cdot n))</math-expression>. The klam value of this time bound (an estimate for the largest parameter value that could be solved in a reasonable amount of time) is approximately 190. That is, unless additional algorithmic improvements can be found, this algorithm is suitable only for instances whose vertex cover number is 190 or less. Under reasonable complexity-theoretic assumptions, namely the exponential time hypothesis, the running time cannot be improved to 2, even when <math-expression>n</math-expression> is <math-expression>O(k)</math-expression>. 

However, for planar graphs, and more generally, for graphs excluding some fixed graph as a minor, a vertex cover of size k can be found in time <math-expression>2^{O({\sqrt {k}})}n^{O(1)}</math-expression>, i.e., the problem is subexponential fixed-parameter tractable. This algorithm is again optimal, in the sense that, under the exponential time hypothesis, no algorithm can solve vertex cover on planar graphs in time <math-expression>2^{o({\sqrt {k}})}n^{O(1)}</math-expression>.

### Approximate evaluation

One can find a factor-2 approximation by repeatedly taking both endpoints of an edge into the vertex cover, then removing them from the graph. Put otherwise, we find a maximal matching M with a greedy algorithm and construct a vertex cover C that consists of all endpoints of the edges in M. In the following figure, a maximal matching M is marked with red, and the vertex cover C is marked with blue. 

    

The set C constructed this way is a vertex cover: suppose that an edge e is not covered by C; then M ∪ {e} is a matching and e ∉ M, which is a contradiction with the assumption that M is maximal. Furthermore, if e = {u, v} ∈ M, then any vertex cover – including an optimal vertex cover – must contain u or v (or both); otherwise the edge e is not covered. That is, an optimal cover contains at least one endpoint of each edge in M; in total, the set C is at most 2 times as large as the optimal vertex cover. 

This simple algorithm was discovered independently by Fanica Gavril and Mihalis Yannakakis.

More involved techniques show that there are approximation algorithms with a slightly better approximation factor. For example, an approximation algorithm with an approximation factor of <math-expression>\textstyle 2-\Theta \left(1/{\sqrt {\log |V|}}\right)</math-expression> is known. The problem can be approximated with an approximation factor <math-expression>2/(1+\delta )</math-expression> in <math-expression>\delta </math-expression> \- dense graphs.

#### Inapproximability

No better constant-factor approximation algorithm than the above one is known. The minimum vertex cover problem is APX-complete, that is, it cannot be approximated arbitrarily well unless P = NP. Using techniques from the PCP theorem, Dinur and Safra proved in 2005 that minimum vertex cover cannot be approximated within a factor of 1.3606 for any sufficiently large vertex degree unless P = NP. Later, the factor was improved to <math-expression>{\sqrt {2}}-\epsilon </math-expression> for any <math-expression>\epsilon >0</math-expression>. Moreover, if the unique games conjecture is true then minimum vertex cover cannot be approximated within any constant factor better than 2.

Although finding the minimum-size vertex cover is equivalent to finding the maximum-size independent set, as described above, the two problems are not equivalent in an approximation-preserving way: The Independent Set problem has no constant-factor approximation unless P = NP. 

#### Pseudocode

## Applications

Vertex cover optimization serves as a model for many real-world and theoretical problems. For example, a commercial establishment interested in installing the fewest possible closed circuit cameras covering all hallways (edges) connecting all rooms (nodes) on a floor might model the objective as a vertex cover minimization problem. The problem has also been used to model the elimination of repetitive DNA sequences for synthetic biology and metabolic engineering applications.

