The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences). It differs from the longest common substring problem: unlike substrings, subsequences are not required to occupy consecutive positions within the original sequences. The longest common subsequence problem is a classic computer science problem, the basis of data comparison programs such as the diff utility, and has applications in computational linguistics and bioinformatics. It is also widely used by revision control systems such as Git for reconciling multiple changes made to a revision-controlled collection of files. 

For example, consider the sequences (ABCD) and (ACBAD). They have 5 length-2 common subsequences: (AB), (AC), (AD), (BD), and (CD); 2 length-3 common subsequences: (ABD) and (ACD); and no longer common subsequences. So (ABD) and (ACD) are their longest common subsequences. 

## Complexity

For the general case of an arbitrary number of input sequences, the problem is NP-hard. When the number of sequences is constant, the problem is solvable in polynomial time by dynamic programming. 

Given <math-expression>N</math-expression> sequences of lengths <math-expression>n_{1},...,n_{N}</math-expression>, a naive search would test each of the <math-expression>2^{n_{1}}</math-expression> subsequences of the first sequence to determine whether they are also subsequences of the remaining sequences; each subsequence may be tested in time linear in the lengths of the remaining sequences, so the time for this algorithm would be 

    <math-expression>O\left(2^{n_{1}}\sum _{i>1}n_{i}\right).</math-expression>

For the case of two sequences of n and m elements, the running time of the dynamic programming approach is O(n × m). For an arbitrary number of input sequences, the dynamic programming approach gives a solution in 

    <math-expression>O\left(N\prod _{i=1}^{N}n_{i}\right).</math-expression>

There exist methods with lower complexity, which often depend on the length of the LCS, the size of the alphabet, or both. 

The LCS is not necessarily unique; in the worst case, the number of common subsequences is exponential in the lengths of the inputs, so the algorithmic complexity must be at least exponential.

## Solution for two sequences

The LCS problem has an optimal substructure: the problem can be broken down into smaller, simpler subproblems, which can, in turn, be broken down into simpler subproblems, and so on, until, finally, the solution becomes trivial. LCS in particular has overlapping subproblems: the solutions to high-level subproblems often reuse solutions to lower level subproblems. Problems with these two properties are amenable to dynamic programming approaches, in which subproblem solutions are memoized, that is, the solutions of subproblems are saved for reuse. 

### Prefixes

The prefix Sn of S is defined as the first n characters of S. For example, the prefixes of S = (AGCA) are 

    S0 = ()
    S1 = (A)
    S2 = (AG)
    S3 = (AGC)
    S4 = (AGCA).

Let LCS(X, Y) be a function that computes a longest subsequence common to X and Y. Such a function has two interesting properties. 

### First property

LCS(X^A,Y^A) = LCS(X,Y)^A, for all strings X, Y and all symbols A, where ^ denotes string concatenation. This allows one to simplify the LCS computation for two sequences ending in the same symbol. For example, LCS("BANANA","ATANA") = LCS("BANAN","ATAN")^"A", Continuing for the remaining common symbols, LCS("BANANA","ATANA") = LCS("BAN","AT")^"ANA". 

### Second property

If A and B are distinct symbols (A≠B), then LCS(X^A,Y^B) is one of the maximal-length strings in the set { LCS(X^A,Y), LCS(X,Y^B) }, for all strings X, Y. 

For example, LCS("ABCDEFG","BCDGK") is the longest string among LCS("ABCDEFG","BCDG") and LCS("ABCDEF","BCDGK"); if both happened to be of equal length, one of them could be chosen arbitrarily. 

To realize the property, distinguish two cases: 

  * If LCS("ABCDEFG","BCDGK") ends with a "G", then the final "K" cannot be in the LCS, hence LCS("ABCDEFG","BCDGK") = LCS("ABCDEFG","BCDG").
  * If LCS("ABCDEFG","BCDGK") does not end with a "G", then the final "G" cannot be in the LCS, hence LCS("ABCDEFG","BCDGK") = LCS("ABCDEF","BCDGK").

### LCS function defined

Let two sequences be defined as follows: <math-expression>X=(x_{1}x_{2}\cdots x_{m})</math-expression> and <math-expression>Y=(y_{1}y_{2}\cdots y_{n})</math-expression>. The prefixes of <math-expression>X</math-expression> are <math-expression>X_{0},X_{1},X_{2},\dots ,X_{m}</math-expression>; the prefixes of <math-expression>Y</math-expression> are <math-expression>Y_{0},Y_{1},Y_{2},\dots ,Y_{n}</math-expression>. Let <math-expression>{\mathit {LCS}}(X_{i},Y_{j})</math-expression> represent the set of longest common subsequence of prefixes <math-expression>X_{i}</math-expression> and <math-expression>Y_{j}</math-expression>. This set of sequences is given by the following. 

    <math-expression>{\mathit {LCS}}(X_{i},Y_{j})={\begin{cases}\emptyset &{\mbox{if }}i=0{\mbox{ or }}j=0\\{\mathit {LCS}}(X_{i-1},Y_{j-1}){\hat {}}x_{i}&{\mbox{if }}i,j>0{\mbox{ and }}x_{i}=y_{j}\\\operatorname {\max } \{{\mathit {LCS}}(X_{i},Y_{j-1}),{\mathit {LCS}}(X_{i-1},Y_{j})\}&{\mbox{if }}i,j>0{\mbox{ and }}x_{i}\neq y_{j}.\end{cases}}</math-expression>

To find the LCS of <math-expression>X_{i}</math-expression> and <math-expression>Y_{j}</math-expression>, compare <math-expression>x_{i}</math-expression> and <math-expression>y_{j}</math-expression>. If they are equal, then the sequence <math-expression>{\mathit {LCS}}(X_{i-1},Y_{j-1})</math-expression> is extended by that element, <math-expression>x_{i}</math-expression>. If they are not equal, then the longest among the two sequences, <math-expression>{\mathit {LCS}}(X_{i},Y_{j-1})</math-expression>, and <math-expression>{\mathit {LCS}}(X_{i-1},Y_{j})</math-expression>, is retained. (If they are the same length, but not identical, then both are retained.) 

### Worked example

The longest subsequence common to R = (GAC), and C = (AGCAT) will be found. Because the LCS function uses a "zeroth" element, it is convenient to define zero prefixes that are empty for these sequences: R0 = Ø; and C0 = Ø. All the prefixes are placed in a table with C in the first row (making it a column header) and R in the first column (making it a row header). 

This table is used to store the LCS sequence for each step of the calculation. The second column and second row have been filled in with Ø, because when an empty sequence is compared with a non-empty sequence, the longest common subsequence is always an empty sequence. 

LCS(R1, C1) is determined by comparing the first elements in each sequence. G and A are not the same, so this LCS gets (using the "second property") the longest of the two sequences, LCS(R1, C0) and LCS(R0, C1). According to the table, both of these are empty, so LCS(R1, C1) is also empty, as shown in the table below. The arrows indicate that the sequence comes from both the cell above, LCS(R0, C1) and the cell on the left, LCS(R1, C0). 

LCS(R1, C2) is determined by comparing G and G. They match, so G is appended to the upper left sequence, LCS(R0, C1), which is (Ø), giving (ØG), which is (G). 

For LCS(R1, C3), G and C do not match. The sequence above is empty; the one to the left contains one element, G. Selecting the longest of these, LCS(R1, C3) is (G). The arrow points to the left, since that is the longest of the two sequences. 

LCS(R1, C4), likewise, is (G). 

LCS(R1, C5), likewise, is (G). 

For LCS(R2, C1), A is compared with A. The two elements match, so A is appended to Ø, giving (A). 

For LCS(R2, C2), A and G do not match, so the longest of LCS(R1, C2), which is (G), and LCS(R2, C1), which is (A), is used. In this case, they each contain one element, so this LCS is given two subsequences: (A) and (G). 

For LCS(R2, C3), A does not match C. LCS(R2, C2) contains sequences (A) and (G); LCS(R1, C3) is (G), which is already contained in LCS(R2, C2). The result is that LCS(R2, C3) also contains the two subsequences, (A) and (G). 

For LCS(R2, C4), A matches A, which is appended to the upper left cell, giving (GA). 

For LCS(R2, C5), A does not match T. Comparing the two sequences, (GA) and (G), the longest is (GA), so LCS(R2, C5) is (GA). 

For LCS(R3, C1), C and A do not match, so LCS(R3, C1) gets the longest of the two sequences, (A). 

For LCS(R3, C2), C and G do not match. Both LCS(R3, C1) and LCS(R2, C2) have one element. The result is that LCS(R3, C2) contains the two subsequences, (A) and (G). 

For LCS(R3, C3), C and C match, so C is appended to LCS(R2, C2), which contains the two subsequences, (A) and (G), giving (AC) and (GC). 

For LCS(R3, C4), C and A do not match. Combining LCS(R3, C3), which contains (AC) and (GC), and LCS(R2, C4), which contains (GA), gives a total of three sequences: (AC), (GC), and (GA). 

Finally, for LCS(R3, C5), C and T do not match. The result is that LCS(R3, C5) also contains the three sequences, (AC), (GC), and (GA). 

The final result is that the last cell contains all the longest subsequences common to (AGCAT) and (GAC); these are (AC), (GC), and (GA). The table also shows the longest common subsequences for every possible pair of prefixes. For example, for (AGC) and (GA), the longest common subsequence are (A) and (G). 

### Traceback approach

Calculating the LCS of a row of the LCS table requires only the solutions to the current row and the previous row. Still, for long sequences, these sequences can get numerous and long, requiring a lot of storage space. Storage space can be saved by saving not the actual subsequences, but the length of the subsequence and the direction of the arrows, as in the table below. 

The actual subsequences are deduced in a "traceback" procedure that follows the arrows backwards, starting from the last cell in the table. When the length decreases, the sequences must have had a common element. Several paths are possible when two arrows are shown in a cell. Below is the table for such an analysis, with numbers colored in cells where the length is about to decrease. The bold numbers trace out the sequence, (GA).

## Relation to other problems

For two strings <math-expression>X_{1\dots m}</math-expression> and <math-expression>Y_{1\dots n}</math-expression>, the length of the shortest common supersequence is related to the length of the LCS by

    <math-expression>\left|SCS(X,Y)\right|=n+m-\left|LCS(X,Y)\right|.</math-expression>

The edit distance when only insertion and deletion is allowed (no substitution), or when the cost of the substitution is the double of the cost of an insertion or deletion, is: 

    <math-expression>d'(X,Y)=n+m-2\cdot \left|LCS(X,Y)\right|.</math-expression>

## Code for the dynamic programming solution

### Computing the length of the LCS

The function below takes as input sequences X[1..m] and Y[1..n], computes the LCS between X[1..i] and Y[1..j] for all 1 ≤ i ≤ m and 1 ≤ j ≤ n, and stores it in C[i,j]. C[m,n] will contain the length of the LCS of X and Y.
    
    
    function LCSLength(X[1..m], Y[1..n])
        C = array(0..m, 0..n)
        for i := 0..m
            C[i,0] = 0
        for j := 0..n
            C[0,j] = 0
        for i := 1..m
            for j := 1..n
                if X[i] = Y[j]
                    C[i,j] := C[i-1,j-1] + 1
                else
                    C[i,j] := max(C[i,j-1], C[i-1,j])
        return C[m,n]
    

Alternatively, memoization could be used. 

#### Example in C#

### Reading out a LCS

The following function backtracks the choices taken when computing the C table. If the last characters in the prefixes are equal, they must be in an LCS. If not, check what gave the largest LCS of keeping <math-expression>x_{i}</math-expression> and <math-expression>y_{j}</math-expression>, and make the same choice. Just choose one if they were equally long. Call the function with i=m and j=n. 
    
    
    function backtrack(C[0..m,0..n], X[1..m], Y[1..n], i, j)
        if i = 0 or j = 0
            return ""
        if  X[i] = Y[j]
            return backtrack(C, X, Y, i-1, j-1) + X[i]
        if C[i,j-1] > C[i-1,j]
            return backtrack(C, X, Y, i, j-1)
        return backtrack(C, X, Y, i-1, j)
    

#### Example in C#

### Reading out all LCSs

If choosing <math-expression>x_{i}</math-expression> and <math-expression>y_{j}</math-expression> would give an equally long result, read out both resulting subsequences. This is returned as a set by this function. Notice that this function is not polynomial, as it might branch in almost every step if the strings are similar. 
    
    
    function backtrackAll(C[0..m,0..n], X[1..m], Y[1..n], i, j)
        if i = 0 or j = 0
            return {""}
        if X[i] = Y[j]
            return {Z + X[i] for all Z in backtrackAll(C, X, Y, i-1, j-1)}
        R := {}
        if C[i,j-1] ≥ C[i-1,j]
            R := backtrackAll(C, X, Y, i, j-1)
        if C[i-1,j] ≥ C[i,j-1]
            R := R ∪ backtrackAll(C, X, Y, i-1, j)
        return R
    

### Print the diff

This function will backtrack through the C matrix, and print the diff between the two sequences. Notice that you will get a different answer if you exchange ≥ and <, with > and ≤ below. 
    
    
    function printDiff(C[0..m,0..n], X[1..m], Y[1..n], i, j)
        if i >= 0 and j >= 0 and X[i] = Y[j]
            printDiff(C, X, Y, i-1, j-1)
            print "  " + X[i]
        else if j > 0 and (i = 0 or C[i,j-1] ≥ C[i-1,j])
            printDiff(C, X, Y, i, j-1)
            print "+ " + Y[j]
        else if i > 0 and (j = 0 or C[i,j-1] < C[i-1,j])
            printDiff(C, X, Y, i-1, j)
            print "- " + X[i]
        else
            print ""
    

### Example

Let <math-expression>X</math-expression> be “XMJYAUZ” and <math-expression>Y</math-expression> be “MZJAWXU”. The longest common subsequence between <math-expression>X</math-expression> and <math-expression>Y</math-expression> is “MJAU”. The table C shown below, which is generated by the function LCSLength, shows the lengths of the longest common subsequences between prefixes of <math-expression>X</math-expression> and <math-expression>Y</math-expression>. The <math-expression>i</math-expression>th row and <math-expression>j</math-expression>th column shows the length of the LCS between <math-expression>X_{1..i}</math-expression> and <math-expression>Y_{1..j}</math-expression>. 

The highlighted numbers show the path the function backtrack would follow from the bottom right to the top left corner, when reading out an LCS. If the current symbols in <math-expression>X</math-expression> and <math-expression>Y</math-expression> are equal, they are part of the LCS, and we go both up and left (shown in bold). If not, we go up or left, depending on which cell has a higher number. This corresponds to either taking the LCS between <math-expression>X_{1..i-1}</math-expression> and <math-expression>Y_{1..j}</math-expression>, or <math-expression>X_{1..i}</math-expression> and <math-expression>Y_{1..j-1}</math-expression>. 

## Code optimization

Several optimizations can be made to the algorithm above to speed it up for real-world cases. 

### Reduce the problem set

The C matrix in the naive algorithm grows quadratically with the lengths of the sequences. For two 100-item sequences, a 10,000-item matrix would be needed, and 10,000 comparisons would need to be done. In most real-world cases, especially source code diffs and patches, the beginnings and ends of files rarely change, and almost certainly not both at the same time. If only a few items have changed in the middle of the sequence, the beginning and end can be eliminated. This reduces not only the memory requirements for the matrix, but also the number of comparisons that must be done. 
    
    
    function LCS(X[1..m], Y[1..n])
        start := 1
        m_end := m
        n_end := n
        trim off the matching items at the beginning
        while start ≤ m_end and start ≤ n_end and X[start] = Y[start]
            start := start + 1
        trim off the matching items at the end
        while start ≤ m_end and start ≤ n_end and X[m_end] = Y[n_end]
            m_end := m_end - 1
            n_end := n_end - 1
        C = array(start-1..m_end, start-1..n_end)
        only loop over the items that have changed
        for i := start..m_end
            for j := start..n_end
                the algorithm continues as before ...
    

In the best-case scenario, a sequence with no changes, this optimization would eliminate the need for the C matrix. In the worst-case scenario, a change to the very first and last items in the sequence, only two additional comparisons are performed. 

### Reduce the comparison time

Most of the time taken by the naive algorithm is spent performing comparisons between items in the sequences. For textual sequences such as source code, you want to view lines as the sequence elements instead of single characters. This can mean comparisons of relatively long strings for each step in the algorithm. Two optimizations can be made that can help to reduce the time these comparisons consume. 

### Reduce strings to hashes

A hash function or checksum can be used to reduce the size of the strings in the sequences. That is, for source code where the average line is 60 or more characters long, the hash or checksum for that line might be only 8 to 40 characters long. Additionally, the randomized nature of hashes and checksums would guarantee that comparisons would short-circuit faster, as lines of source code will rarely be changed at the beginning. 

There are three primary drawbacks to this optimization. First, an amount of time needs to be spent beforehand to precompute the hashes for the two sequences. Second, additional memory needs to be allocated for the new hashed sequences. However, in comparison to the naive algorithm used here, both of these drawbacks are relatively minimal. 

The third drawback is that of collisions. Since the checksum or hash is not guaranteed to be unique, there is a small chance that two different items could be reduced to the same hash. This is unlikely in source code, but it is possible. A cryptographic hash would therefore be far better suited for this optimization, as its entropy is going to be significantly greater than that of a simple checksum. However, the benefits may not be worth the setup and computational requirements of a cryptographic hash for small sequence lengths. 

### Reduce the required space

If only the length of the LCS is required, the matrix can be reduced to a <math-expression>2\times \min(n,m)</math-expression> matrix with ease, or to a <math-expression>\min(m,n)+1</math-expression> vector (smarter) as the dynamic programming approach only needs the current and previous columns of the matrix. Hirschberg's algorithm allows the construction of the optimal sequence itself in the same quadratic time and linear space bounds.

### Further optimized algorithms

Several algorithms exist that run faster than the presented dynamic programming approach. One of them is Hunt–Szymanski algorithm, which typically runs in <math-expression>O((n+r)\log(n))</math-expression> time (for <math-expression>n>m</math-expression>), where <math-expression>r</math-expression> is the number of matches between the two sequences. For problems with a bounded alphabet size, the Method of Four Russians can be used to reduce the running time of the dynamic programming algorithm by a logarithmic factor.

## Behavior on random strings

Beginning with Chvátal & Sankoff (1975), a number of researchers have investigated the behavior of the longest common subsequence length when the two given strings are drawn randomly from the same alphabet. When the alphabet size is constant, the expected length of the LCS is proportional to the length of the two strings, and the constants of proportionality (depending on alphabet size) are known as the Chvátal–Sankoff constants. Their exact values are not known, but upper and lower bounds on their values have been proven, and it is known that they grow inversely proportionally to the square root of the alphabet size. Simplified mathematical models of the longest common subsequence problem have been shown to be controlled by the Tracy–Widom distribution.

