Breadth-first search (BFS) is an algorithm for searching a tree data structure for a node that satisfies a given property. It starts at the tree root and explores all nodes at the present depth prior to moving on to the nodes at the next depth level. Extra memory, usually a queue, is needed to keep track of the child nodes that were encountered but not yet explored. 

For example, in a chess endgame a chess engine may build the game tree from the current position by applying all possible moves, and use breadth-first search to find a win position for white. Implicit trees (such as game trees or other problem-solving trees) may be of infinite size; breadth-first search is guaranteed to find a solution node if one exists. 

In contrast, (plain) depth-first search, which explores the node branch as far as possible before backtracking and expanding other nodes, may get lost in an infinite branch and never make it to the solution node. Iterative deepening depth-first search avoids the latter drawback at the price of exploring the tree's top parts over and over again. On the other hand, both depth-first algorithms get along without extra memory. 

Breadth-first search can be generalized to graphs, when the start node (sometimes referred to as a 'search key') is explicitly given, and precautions are taken against following a vertex twice. 

BFS and its application in finding connected components of graphs were invented in 1945 by Konrad Zuse, in his (rejected) Ph.D. thesis on the Plankalkül programming language, but this was not published until 1972. It was reinvented in 1959 by Edward F. Moore, who used it to find the shortest path out of a maze, and later developed by C. Y. Lee into a wire routing algorithm (published 1961).

## Pseudocode

Input: A graph G and a starting vertex root of G

Output: Goal state. The parent links trace the shortest path back to root
    
    
     1  procedure BFS(G, root) is
     2      let Q be a queue
     3      label root as explored
     4      Q.enqueue(root)
     5      while Q is not empty do
     6          v := Q.dequeue()
     7          if v is the goal then
     8              return v
     9          for all edges from v to w in G.adjacentEdges(v) do
    10              if w is not labeled as explored then
    11                  label w as explored
    12                  w.parent := v
    13                  Q.enqueue(w)
    

### More details

This non-recursive implementation is similar to the non-recursive implementation of depth-first search, but differs from it in two ways: 

  1. it uses a queue (First In First Out) instead of a stack and
  2. it checks whether a vertex has been explored before enqueueing the vertex rather than delaying this check until the vertex is dequeued from the queue.

If G is a tree, replacing the queue of this breadth-first search algorithm with a stack will yield a depth-first search algorithm. For general graphs, replacing the stack of the iterative depth-first search implementation with a queue would also produce a breadth-first search algorithm, although a somewhat nonstandard one.

The Q queue contains the frontier along which the algorithm is currently searching. 

Nodes can be labelled as explored by storing them in a set, or by an attribute on each node, depending on the implementation. 

Note that the word node is usually interchangeable with the word vertex. 

The parent attribute of each node is useful for accessing the nodes in a shortest path, for example by backtracking from the destination node up to the starting node, once the BFS has been run, and the predecessors nodes have been set. 

Breadth-first search produces a so-called breadth first tree. You can see how a breadth first tree looks in the following example. 

### Example

The following is an example of the breadth-first tree obtained by running a BFS on German cities starting from Frankfurt: 

## Analysis

### Time and space complexity

The time complexity can be expressed as <math-expression>O(|V|+|E|)</math-expression>, since every vertex and every edge will be explored in the worst case. <math-expression>|V|</math-expression> is the number of vertices and <math-expression>|E|</math-expression> is the number of edges in the graph. Note that <math-expression>O(|E|)</math-expression> may vary between <math-expression>O(1)</math-expression> and <math-expression>O(|V|^{2})</math-expression>, depending on how sparse the input graph is.

When the number of vertices in the graph is known ahead of time, and additional data structures are used to determine which vertices have already been added to the queue, the space complexity can be expressed as <math-expression>O(|V|)</math-expression>, where <math-expression>|V|</math-expression> is the number of vertices. This is in addition to the space required for the graph itself, which may vary depending on the graph representation used by an implementation of the algorithm. 

When working with graphs that are too large to store explicitly (or infinite), it is more practical to describe the complexity of breadth-first search in different terms: to find the nodes that are at distance d from the start node (measured in number of edge traversals), BFS takes O(b) time and memory, where b is the "branching factor" of the graph (the average out-degree).

### Completeness

In the analysis of algorithms, the input to breadth-first search is assumed to be a finite graph, represented as an adjacency list, adjacency matrix, or similar representation. However, in the application of graph traversal methods in artificial intelligence the input may be an implicit representation of an infinite graph. In this context, a search method is described as being complete if it is guaranteed to find a goal state if one exists. Breadth-first search is complete, but depth-first search is not. When applied to infinite graphs represented implicitly, breadth-first search will eventually find the goal state, but depth first search may get lost in parts of the graph that have no goal state and never return.

## BFS ordering

An enumeration of the vertices of a graph is said to be a BFS ordering if it is the possible output of the application of BFS to this graph. 

Let <math-expression>G=(V,E)</math-expression> be a graph with <math-expression>n</math-expression> vertices. Recall that <math-expression>N(v)</math-expression> is the set of neighbors of <math-expression>v</math-expression>. Let <math-expression>\sigma =(v_{1},\dots ,v_{m})</math-expression> be a list of distinct elements of <math-expression>V</math-expression>, for <math-expression>v\in V\setminus \{v_{1},\dots ,v_{m}\}</math-expression>, let <math-expression>\nu _{\sigma }(v)</math-expression> be the least <math-expression>i</math-expression> such that <math-expression>v_{i}</math-expression> is a neighbor of <math-expression>v</math-expression>, if such a <math-expression>i</math-expression> exists, and be <math-expression>\infty </math-expression> otherwise. 

Let <math-expression>\sigma =(v_{1},\dots ,v_{n})</math-expression> be an enumeration of the vertices of <math-expression>V</math-expression>. The enumeration <math-expression>\sigma </math-expression> is said to be a BFS ordering (with source <math-expression>v_{1}</math-expression>) if, for all <math-expression>1<i\leq n</math-expression>, <math-expression>v_{i}</math-expression> is the vertex <math-expression>w\in V\setminus \{v_{1},\dots ,v_{i-1}\}</math-expression> such that <math-expression>\nu _{(v_{1},\dots ,v_{i-1})}(w)</math-expression> is minimal. Equivalently, <math-expression>\sigma </math-expression> is a BFS ordering if, for all <math-expression>1\leq i<j<k\leq n</math-expression> with <math-expression>v_{i}\in N(v_{k})\setminus N(v_{j})</math-expression>, there exists a neighbor <math-expression>v_{m}</math-expression> of <math-expression>v_{j}</math-expression> such that <math-expression>m<i</math-expression>. 

## Applications

Breadth-first search can be used to solve many problems in graph theory, for example: 

  * Copying garbage collection, Cheney's algorithm
  * Finding the shortest path between two nodes u and v, with path length measured by number of edges (an advantage over depth-first search)
  * (Reverse) Cuthill–McKee mesh numbering
  * Ford–Fulkerson method for computing the maximum flow in a flow network
  * Serialization/Deserialization of a binary tree vs serialization in sorted order, allows the tree to be re-constructed in an efficient manner.
  * Construction of the failure function of the Aho-Corasick pattern matcher.
  * Testing bipartiteness of a graph.
  * Implementing parallel algorithms for computing a graph's transitive closure. 

