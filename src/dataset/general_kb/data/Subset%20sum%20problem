The subset sum problem (SSP) is a decision problem in computer science. In its most general formulation, there is a multiset <math-expression>S</math-expression> of integers and a target-sum <math-expression>T</math-expression>, and the question is to decide whether any subset of the integers sum to precisely <math-expression>T</math-expression>. The problem is known to be NP. Moreover, some restricted variants of it are NP-complete too, for example:

  * The variant in which all inputs are positive.
  * The variant in which inputs may be positive or negative, and <math-expression>T=0</math-expression>. For example, given the set <math-expression>\{-7,-3,-2,9000,5,8\}</math-expression>, the answer is yes because the subset <math-expression>\{-3,-2,5\}</math-expression> sums to zero.
  * The variant in which all inputs are positive, and the target sum is exactly half the sum of all inputs, i.e., <math-expression>T={\frac {1}{2}}(a_{1}+\dots +a_{n})</math-expression> . This special case of SSP is known as the partition problem.

SSP can also be regarded as an optimization problem: find a subset whose sum is at most T, and subject to that, as close as possible to T. It is NP-hard, but there are several algorithms that can solve it reasonably quickly in practice. 

SSP is a special case of the knapsack problem and of the multiple subset sum problem. 

## Computational hardness

The run-time complexity of SSP depends on two parameters: 

  * n \- the number of input integers. If n is a small fixed number, then an exhaustive search for the solution is practical.
  * L \- the precision of the problem, stated as the number of binary place values that it takes to state the problem. If L is a small fixed number, then there are dynamic programming algorithms that can solve it exactly.

As both n and L grow large, SSP is NP-hard. The complexity of the best known algorithms is exponential in the smaller of the two parameters n and L. The problem is NP-hard even when all input integers are positive (and the target-sum T is a part of the input). This can be proved by a direct reduction from 3SAT. It can also be proved by reduction from 3-dimensional matching (3DM):

  * We are given an instance of 3DM, where the vertex sets are W, X, Y. Each set has n vertices. There are m edges, where each edge contains exactly one vertex from each of W, X, Y. Denote L := ceiling(log2(m+1)), so that L is larger than the number of bits required to represent the number of edges.
  * We construct an instance of SSP with m positive integers. The integers are described by their binary representation. Each input integer can be represented by 3nL bits, divided into 3n zones of L bits. Each zone corresponds to a vertex.
  * For each edge (w,x,y) in the 3DM instance, there is an integer in the SSP instance, in which exactly three bits are "1": the least-significant bits in the zones of the vertices w, x, and y. For example, if n=10 and L=3, and W=(0,...,9), X=(10,...,19), Y=(20,...,29), then the edge (0, 10, 20) is represented by the number (2+2+2).
  * The target sum T in the SSP instance is set to an integer with "1" in the least-significant bit of every zone, that is, (2+2+...+2).
  * If the 3DM instance has a perfect matching, then summing the corresponding integers in the SSP instance yields exactly T.
  * Conversely, if the SSP instance has a subset with sum exactly T, then, since the zones are sufficiently large so that there are no "carries" from one zone to the next, the sum must correspond to a perfect matching in the 3DM instance.

The following variants are also known to be NP-hard: 

  * The input integers can be both positive and negative, and the target-sum T = 0. This can be proved by reduction from the variant with positive integers. Denote that variant by SubsetSumPositive and the current variant by SubsetSumZero. Given an instance (S, T) of SubsetSumPositive, construct an instance of SubsetSumZero by adding a single element with value −T. Given a solution to the SubsetSumPositive instance, adding the −T yields a solution to the SubsetSumZero instance. Conversely, given a solution to the SubsetSumZero instance, it must contain the −T (since all integers in S are positive), so to get a sum of zero, it must also contain a subset of S with a sum of +T, which is a solution of the SubsetSumPositive instance.
  * The input integers are positive, and T = sum(S)/2. This can also be proved by reduction from the general variant; see partition problem.

## Exponential time algorithms

There are several ways to solve SSP in time exponential in n.

### Inclusion–exclusion

The most naïve algorithm would be to cycle through all subsets of n numbers and, for every one of them, check if the subset sums to the right number. The running time is of order <math-expression>O(2^{n}\cdot n)</math-expression>, since there are <math-expression>2^{n}</math-expression> subsets and, to check each subset, we need to sum at most n elements. 

The algorithm can be implemented by depth-first search of a binary tree: each level in the tree corresponds to an input number; the left branch corresponds to excluding the number from the set, and the right branch corresponds to including the number (hence the name Inclusion-Exclusion). The memory required is <math-expression>O(n)</math-expression>. The run-time can be improved by several heuristics:

  * Process the input numbers in descending order.
  * If the integers included in a given node exceed the sum of the best subset found so far, the node is pruned.
  * If the integers included in a given node, plus all remaining integers, are less than the sum of the best subset found so far, the node is pruned.

### Horowitz and Sahni

In 1974, Horowitz and Sahni published a faster exponential-time algorithm, which runs in time <math-expression>O(2^{n/2}\cdot (n/2))</math-expression>, but requires much more space - <math-expression>O(2^{n/2})</math-expression>. The algorithm splits arbitrarily the n elements into two sets of <math-expression>n/2</math-expression> each. For each of these two sets, it stores a list of the sums of all <math-expression>2^{n/2}</math-expression> possible subsets of its elements. Each of these two lists is then sorted. Using even the fastest comparison sorting algorithm, Mergesort for this step would take time <math-expression>O(2^{n/2}n)</math-expression>. However, given a sorted list of sums for <math-expression>k</math-expression> elements, the list can be expanded to two sorted lists with the introduction of a (<math-expression>k+1</math-expression>)th element, and these two sorted lists can be merged in time <math-expression>O(2^{k})</math-expression>. Thus, each list can be generated in sorted form in time <math-expression>O(2^{n/2})</math-expression>. Given the two sorted lists, the algorithm can check if an element of the first array and an element of the second array sum up to T in time <math-expression>O(2^{n/2})</math-expression>. To do that, the algorithm passes through the first array in decreasing order (starting at the largest element) and the second array in increasing order (starting at the smallest element). Whenever the sum of the current element in the first array and the current element in the second array is more than T, the algorithm moves to the next element in the first array. If it is less than T, the algorithm moves to the next element in the second array. If two elements that sum to T are found, it stops. (The sub-problem for two elements sum is known as two-sum.) 

### Schroeppel and Shamir

In 1981, Schroeppel and Shamir presented an algorithm based on Horowitz and Sanhi, that requires similar runtime - <math-expression>O(2^{n/2}\cdot (n/4))</math-expression>, much less space - <math-expression>O(2^{n/4})</math-expression>. Rather than generating and storing all subsets of n/2 elements in advance, they partition the elements into 4 sets of n/4 elements each, and generate subsets of n/2 element pairs dynamically using a min heap, which yields the above time and space complexities since this can be done in <math-expression>O(k^{2}\log(k))</math-expression> and space <math-expression>O(k)</math-expression> given 4 lists of length k. 

Due to space requirements, the HS algorithm is practical for up to about 50 integers, and the SS algorithm is practical for up to 100 integers.

### Howgrave-Graham and Joux

Howgrave-Graham and Joux presented a probabilistic algorithm that runs faster than all previous ones - in time <math-expression>O(2^{.337n})</math-expression> using space <math-expression>O(2^{.256n})</math-expression>. It solves only the decision problem, cannot prove there is no solution for a given sum, and does not return the subset sum closest to T. 

The techniques of Howgrave-Graham and Joux were subsequently extended bringing the time-complexity to <math-expression>O(2^{.291n})</math-expression>. 

## Pseudo-polynomial time dynamic programming solutions

SSP can be solved in pseudo-polynomial time using dynamic programming. Suppose we have the following sequence of elements in an instance: 

    <math-expression>x_{1},\ldots ,x_{N}</math-expression>

We define a state as a pair (i, s) of integers. This state represents the fact that 

    "there is a nonempty subset of <math-expression>x_{1},\ldots ,x_{i}</math-expression> which sums to s."

Each state (i, s) has two next states: 

  * (i+1, s), implying that <math-expression>x_{i+1}</math-expression> is not included in the subset;
  * (i+1, s+<math-expression>x_{i+1}</math-expression>), implying that <math-expression>x_{i+1}</math-expression> is included in the subset.

Starting from the initial state (0, 0), it is possible to use any graph search algorithm (e.g. BFS) to search the state (N, T). If the state is found, then by backtracking we can find a subset with a sum of exactly T. 

The run-time of this algorithm is at most linear in the number of states. The number of states is at most N times the number of different possible sums. Let A be the sum of the negative values and B the sum of the positive values; the number of different possible sums is at most B-A, so the total runtime is in <math-expression>O(N(B-A))</math-expression>. For example, if all input values are positive and bounded by some constant C, then B is at most N C, so the time required is <math-expression>O(N^{2}C)</math-expression>. 

This solution does not count as polynomial time in complexity theory because <math-expression>B-A</math-expression> is not polynomial in the size of the problem, which is the number of bits used to represent it. This algorithm is polynomial in the values of A and B, which are exponential in their numbers of bits. However, Subset Sum encoded in unary is in P, since then the size of the encoding is linear in B-A. Hence, Subset Sum is only weakly NP-Complete. 

For the case that each <math-expression>x_{i}</math-expression> is positive and bounded by a fixed constant C, Pisinger found a linear time algorithm having time complexity <math-expression>O(NC)</math-expression> (note that this is for the version of the problem where the target sum is not necessarily zero, otherwise the problem would be trivial). In 2015, Koiliaris and Xu found a deterministic <math-expression>{\tilde {O}}(T{\sqrt {N}})</math-expression> algorithm for the subset sum problem where T is the sum we need to find. In 2017, Bringmann found a randomized <math-expression>{\tilde {O}}(T+N)</math-expression> time algorithm.

In 2014, Curtis and Sanches found a simple recursion highly scalable in SIMD machines having <math-expression>O(N(m-x_{\min })/p)</math-expression> time and <math-expression>O(N+m-x_{\min })</math-expression> space, where p is the number of processing elements, <math-expression>m=\min(s,\sum x_{i}-s)</math-expression> and <math-expression>x_{\min }</math-expression> is the lowest integer. This is the best theoretical parallel complexity known so far. 

A comparison of practical results and the solution of hard instances of the SSP is discussed by Curtis and Sanches.

## Polynomial time approximation algorithms

Suppose all inputs are positive. An approximation algorithm to SSP aims to find a subset of S with a sum of at most T and at least r times the optimal sum, where r is a number in (0,1) called the approximation ratio. 

### Simple 1/2-approximation

The following very simple algorithm has an approximation ratio of 1/2:

  * Order the inputs by descending value;
  * Put the next-largest input into the subset, as long as it fits there.

When this algorithm terminates, either all inputs are in the subset (which is obviously optimal), or there is an input that does not fit. The first such input is smaller than all previous inputs that are in the subset and the sum of inputs in the subset is more than T/2 otherwise the input also is less than T/2 and it would fit in the set. Such a sum greater than T/2 is obviously more than OPT/2. 

### Fully-polynomial time approximation scheme

The following algorithm attains, for every <math-expression>\epsilon >0</math-expression>, an approximation ratio of <math-expression>(1-\epsilon )</math-expression>. Its run time is polynomial in n and <math-expression>1/\epsilon </math-expression>. Recall that n is the number of inputs and T is the upper bound to the subset sum. 
    
    
    initialize a list L to contain one element 0.
    
    for each i from 1 to n do
        let Ui be a list containing all elements y in L, and all sums xi + y for all y in L.
        sort Ui in ascending order
        make L empty 
        let y be the smallest element of Ui
        add y to L
        for each element z of Ui in increasing order do
            // Trim the list by eliminating numbers close to one another
            // and throw out elements greater than the target sum T.
            if y +  ε T/n < z ≤ T then
                y = z
                add z to L
    
    return the largest element in L.
    

Note that without the trimming step (the inner "for each" loop), the list L would contain the sums of all <math-expression>2^{n}</math-expression> subsets of inputs. The trimming step does two things: 

  * It ensures that all sums remaining in L are below T, so they are feasible solutions to the subset-sum problem.
  * It ensures that the list L is "sparse", that is, the difference between each two consecutive partial-sums is at least <math-expression>\epsilon T/n</math-expression>.

These properties together guarantee that the list L contains no more than <math-expression>n/\epsilon </math-expression> elements; therefore the run-time is polynomial in <math-expression>n/\epsilon </math-expression>. 

When the algorithm ends, if the optimal sum is in L, then it is returned and we are done. Otherwise, it must have been removed in a previous trimming step. Each trimming step introduces an additive error of at most <math-expression>\epsilon T/n</math-expression>, so n steps together introduce an error of at most <math-expression>\epsilon T</math-expression>. Therefore, the returned solution is at least <math-expression>{\text{OPT}}-\epsilon T</math-expression> which is at least <math-expression>(1-\epsilon ){\text{OPT}}</math-expression> . 

The above algorithm provides an exact solution to SSP in the case that the input numbers are small (and non-negative). If any sum of the numbers can be specified with at most P bits, then solving the problem approximately with <math-expression>\epsilon =2^{-P}</math-expression> is equivalent to solving it exactly. Then, the polynomial time algorithm for approximate subset sum becomes an exact algorithm with running time polynomial in n and <math-expression>2^{P}</math-expression> (i.e., exponential in P). 

Kellerer, Mansini, Pferschy and Speranza and Kellerer, Pferschy and Pisinger present other FPTAS-s for subset sum. 

