In computer science, a red–black tree is a kind of self-balancing binary search tree. Each node stores an extra bit representing "color" ("red" or "black"), used to ensure that the tree remains balanced during insertions and deletions.

When the tree is modified, the new tree is rearranged and "repainted" to restore the coloring properties that constrain how unbalanced the tree can become in the worst case. The properties are designed such that this rearranging and recoloring can be performed efficiently. 

The re-balancing is not perfect, but guarantees searching in <math-expression>O(\log n)</math-expression> time, where <math-expression>n</math-expression> is the number of entries. The insert and delete operations, along with the tree rearrangement and recoloring, are also performed in <math-expression>O(\log n)</math-expression> time.

Tracking the color of each node requires only one bit of information per node because there are only two colors. The tree does not contain any other data specific to it being a red–black tree, so its memory footprint is almost identical to that of a classic (uncolored) binary search tree. In many cases, the additional bit of information can be stored at no additional memory cost. 

## History

In 1972, Rudolf Bayer invented a data structure that was a special order-4 case of a B-tree. These trees maintained all paths from root to leaf with the same number of nodes, creating perfectly balanced trees. However, they were not binary search trees. Bayer called them a "symmetric binary B-tree" in his paper and later they became popular as 2–3–4 trees or just 2–4 trees.

In a 1978 paper, "A Dichromatic Framework for Balanced Trees", Leonidas J. Guibas and Robert Sedgewick derived the red–black tree from the symmetric binary B-tree. The color "red" was chosen because it was the best-looking color produced by the color laser printer available to the authors while working at Xerox PARC. Another response from Guibas states that it was because of the red and black pens available to them to draw the trees. Author's name was Rudolf Bayer so he took the initials from his name that is R B and in colours, R means red and B means Black 

In 1993, Arne Andersson introduced the idea of a right leaning tree to simplify insert and delete operations.

In 1999, Chris Okasaki showed how to make the insert operation purely functional. Its balance function needed to take care of only 4 unbalanced cases and one default balanced case.

The original algorithm used 8 unbalanced cases, but Cormen et al. (2001) reduced that to 6 unbalanced cases. Sedgewick showed that the insert operation can be implemented in just 46 lines of Java code. In 2008, Sedgewick proposed the left-leaning red–black tree, leveraging Andersson’s idea that simplified the insert and delete operations. Sedgewick originally allowed nodes whose two children are red, making his trees more like 2–3–4 trees, but later this restriction was added, making new trees more like 2–3 trees. Sedgewick implemented the insert algorithm in just 33 lines, significantly shortening his original 46 lines of code.

## Terminology

A red–black tree is a special type of binary search tree, used in computer science to organise pieces of comparable data, such as text fragments or numbers (as e.g. the numbers in figures 1 and 2). The nodes carrying keys and/or data are frequently called "internal nodes", but in order to make this very specific they are also called non-NIL nodes in this article. 

The leaf nodes of red–black trees ( NIL in figure 1) do not contain keys or data. These "leaves" need not be explicit individuals in computer memory: a NULL pointer can —as in all binary tree data structures— encode the fact that there is no child node at this position in the (parent) node. Nevertheless, by their position in the tree, these objects are in relation to other nodes that is relevant to the RB-structure, it may have parent, sibling (i.e., the other child of the parent), uncle, even nephew node; and may be child—but never parent of another node. It is not really necessary to attribute a "color" to these end-of-path objects, because the condition "is NIL or BLACK" is implied by the condition "is NIL" (see also this remark). 

Figure 2 shows the conceptually same red–black tree without these NIL leaves. In order to arrive at the same notion of a path, one has to notice that e.g. 3 paths run through the node 1, namely a path through 1left plus 2 additional paths through 1right, namely the paths through 6left and 6right. This way, these ends of the paths are also docking points for new nodes to be inserted, fully equivalent to the NIL leaves of figure 1. 

On the other hand, in order to save a marginal amount of execution time, these (possibly many) NIL leaves may be implemented as pointers to one unique (and black) sentinel node (instead of pointers of value NULL). 

As a conclusion, the fact that a child does not exist (is not a true node, does not contain data) can in all occurrences be specified by the very same NULL pointer or as the very same pointer to a sentinel node. Throughout this article, either choice is called NIL node and has the constant value NIL. 

The black depth of a node is defined as the number of black nodes from the root to that node (i.e. the number of black ancestors). The black height of a red–black tree is the number of black nodes in any path from the root to the leaves, which, by requirement 4, is constant (alternatively, it could be defined as the black depth of any leaf node). The black height of a node is the black height of the subtree rooted by it. In this article, the black height of a NIL node shall be set to 0, because its subtree is empty as suggested by figure 2, and its tree height is also 0. 

## Properties

In addition to the requirements imposed on a binary search tree the following must be satisfied by a red–black tree:

  1. Every node is either red or black.
  2. All NIL nodes (figure 1) are considered black.
  3. A red node does not have a red child.
  4. Every path from a given node to any of its descendant NIL nodes goes through the same number of black nodes.

Some authors, e.g. Cormen & al., claim "the root is black" as fifth requirement; but not Mehlhorn & Sanders or Sedgewick & Wayne. Since the root can always be changed from red to black, this rule has little effect on analysis. This article also omits it, because it slightly disturbs the recursive algorithms and proofs. 

As an example, every perfect binary tree that consists only of black nodes is a red–black tree. 

The read-only operations, such as search or tree traversal, do not affect any of the requirements. On the other hand, the modifying operations insert and delete easily maintain requirements 1 and 2, but with respect to the other requirements some extra effort has to be taken, in order to avoid the introduction of a violation of requirement 3, called a red-violation, or of requirement 4, called a black-violation. 

The requirements enforce a critical property of red–black trees: the path from the root to the farthest leaf is no more than twice as long as the path from the root to the nearest leaf. The result is that the tree is height-balanced. Since operations such as inserting, deleting, and finding values require worst-case time proportional to the height <math-expression>h</math-expression> of the tree, this upper bound on the height allows red–black trees to be efficient in the worst case, namely logarithmic in the number <math-expression>n</math-expression> of entries, i.e. <math-expression>h\in O(\log n)</math-expression>, which is not the case for ordinary binary search trees. For a mathematical proof see section Proof of bounds. 

Red–black trees, like all binary search trees, allow quite efficient sequential access (e.g. in-order traversal, that is: in the order Left–Root–Right) of their elements. But they support also asymptotically optimal direct access via a traversal from root to leaf, resulting in <math-expression>O(\log n)</math-expression> search time. 

## Analogy to B-trees of order 4

A red–black tree is similar in structure to a B-tree of order 4, where each node can contain between 1 and 3 values and (accordingly) between 2 and 4 child pointers. In such a B-tree, each node will contain only one value matching the value in a black node of the red–black tree, with an optional value before and/or after it in the same node, both matching an equivalent red node of the red–black tree. 

One way to see this equivalence is to "move up" the red nodes in a graphical representation of the red–black tree, so that they align horizontally with their parent black node, by creating together a horizontal cluster. In the B-tree, or in the modified graphical representation of the red–black tree, all leaf nodes are at the same depth. 

The red–black tree is then structurally equivalent to a B-tree of order 4, with a minimum fill factor of 33% of values per cluster with a maximum capacity of 3 values. 

This B-tree type is still more general than a red–black tree though, as it allows ambiguity in a red–black tree conversion—multiple red–black trees can be produced from an equivalent B-tree of order 4 (see figure 3). If a B-tree cluster contains only 1 value, it is the minimum, black, and has two child pointers. If a cluster contains 3 values, then the central value will be black and each value stored on its sides will be red. If the cluster contains two values, however, either one can become the black node in the red–black tree (and the other one will be red). 

So the order-4 B-tree does not maintain which of the values contained in each cluster is the root black tree for the whole cluster and the parent of the other values in the same cluster. Despite this, the operations on red–black trees are more economical in time because you don’t have to maintain the vector of values. It may be costly if values are stored directly in each node rather than being stored by reference. B-tree nodes, however, are more economical in space because you don’t need to store the color attribute for each node. Instead, you have to know which slot in the cluster vector is used. If values are stored by reference, e.g. objects, null references can be used and so the cluster can be represented by a vector containing 3 slots for value pointers plus 4 slots for child references in the tree. In that case, the B-tree can be more compact in memory, improving data locality. 

The same analogy can be made with B-trees with larger orders that can be structurally equivalent to a colored binary tree: you just need more colors. Suppose that you add blue, then the blue–red–black tree defined like red–black trees but with the additional constraint that no two successive nodes in the hierarchy will be blue and all blue nodes will be children of a red node, then it becomes equivalent to a B-tree whose clusters will have at most 7 values in the following colors: blue, red, blue, black, blue, red, blue (For each cluster, there will be at most 1 black node, 2 red nodes, and 4 blue nodes). 

For moderate volumes of values, insertions and deletions in a colored binary tree are faster compared to B-trees because colored trees don’t attempt to maximise the fill factor of each horizontal cluster of nodes (only the minimum fill factor is guaranteed in colored binary trees, limiting the number of splits or junctions of clusters). B-trees will be faster for performing rotations (because rotations will frequently occur within the same cluster rather than with multiple separate nodes in a colored binary tree). For storing large volumes, however, B-trees will be much faster as they will be more compact by grouping several children in the same cluster where they can be accessed locally. 

All optimizations possible in B-trees to increase the average fill factors of clusters are possible in the equivalent multicolored binary tree. Notably, maximizing the average fill factor in a structurally equivalent B-tree is the same as reducing the total height of the multicolored tree, by increasing the number of non-black nodes. The worst case occurs when all nodes in a colored binary tree are black, the best case occurs when only a third of them are black (and the other two thirds are red nodes). 

## Applications and related data structures

Red–black trees offer worst-case guarantees for insertion time, deletion time, and search time. Not only does this make them valuable in time-sensitive applications such as real-time applications, but it makes them valuable building blocks in other data structures that provide worst-case guarantees; for example, many data structures used in computational geometry can be based on red–black trees, and the Completely Fair Scheduler used in current Linux kernels and epoll system call implementation uses red–black trees. 

The AVL tree is another structure supporting <math-expression>O(\log n)</math-expression> search, insertion, and removal. AVL trees can be colored red–black, thus are a subset of RB trees. Worst-case height is 0.720 times the worst-case height of RB trees, so AVL trees are more rigidly balanced. The performance measurements of Ben Pfaff with realistic test cases in 79 runs find AVL to RB ratios between 0.677 and 1.077, median at 0.947, and geometric mean 0.910. WAVL trees have a performance in between those two. 

Red–black trees are also particularly valuable in functional programming, where they are one of the most common persistent data structures, used to construct associative arrays and sets that can retain previous versions after mutations. The persistent version of red–black trees requires <math-expression>O(\log n)</math-expression> space for each insertion or deletion, in addition to time. 

For every 2–4 tree, there are corresponding red–black trees with data elements in the same order. The insertion and deletion operations on 2–4 trees are also equivalent to color-flipping and rotations in red–black trees. This makes 2–4 trees an important tool for understanding the logic behind red–black trees, and this is why many introductory algorithm texts introduce 2–4 trees just before red–black trees, even though 2–4 trees are not often used in practice. 

In 2008, Sedgewick introduced a simpler version of the red–black tree called the left-leaning red–black tree by eliminating a previously unspecified degree of freedom in the implementation. The LLRB maintains an additional invariant that all red links must lean left except during inserts and deletes. Red–black trees can be made isometric to either 2–3 trees, or 2–4 trees, for any sequence of operations. The 2–4 tree isometry was described in 1978 by Sedgewick. With 2–4 trees, the isometry is resolved by a "color flip," corresponding to a split, in which the red color of two children nodes leaves the children and moves to the parent node. 

The original description of the tango tree, a type of tree optimised for fast searches, specifically uses red–black trees as part of its data structure.

As of Java 8, the HashMap has been modified such that instead of using a LinkedList to store different elements with colliding hashcodes, a red–black tree is used. This results in the improvement of time complexity of searching such an element from <math-expression>O(m)</math-expression> to <math-expression>O(\log m)</math-expression> where <math-expression>m</math-expression> is the number of elements with colliding hashcodes.

## Operations

The read-only operations, such as search or tree traversal, on a red–black tree require no modification from those used for binary search trees, because every red–black tree is a special case of a simple binary search tree. However, the immediate result of an insertion or removal may violate the properties of a red–black tree, the restoration of which is called rebalancing so that red–black trees become self-balancing. It requires in the worst case a small number, <math-expression>O(\log n)</math-expression> in Big O notation, where <math-expression>n</math-expression> is the number of objects in the tree, on average or amortized <math-expression>O(1)</math-expression>, a constant number, of color changes (which are very quick in practice); and no more than three tree rotations (two for insertion). 

If the example implementation below is not suitable, other implementations with explanations may be found in Ben Pfaff’s annotated C library GNU libavl (v2.0.3 as of June 2019). 

The details of the insert and removal operations will be demonstrated with example C++ code. The example code uses the type definitions and macros below, as well as the helper function for rotations: 

### Insertion

Insertion begins by placing the new (non-NIL) node, say N, at the position in the binary search tree of a NIL node whose in-order predecessor’s key compares less than the new node’s key, which in turn compares less than the key of its in-order successor. (Frequently, this positioning is the result of a search within the tree immediately preceding the insert operation and consists of a node P together with a direction dir with P->child[dir] == NIL.) The newly inserted node is temporarily colored red so that all paths contain the same number of black nodes as before. But if its parent, say P, is also red then this action introduces a red-violation. 

The rebalancing loop has the following invariant: 

  * The current node N is (red) at the beginning of each iteration.
  * Requirement 3 is satisfied for all pairs node←parent with the possible exception N←P when P is also red (a red-violation at N).
  * All other properties (including requirement 4) are satisfied throughout the tree.

##### Insert case 1

The current node’s parent P is black, so requirement 3 holds. Requirement 4 holds as well according to the loop invariant. 

#### Insert case 2

If both the parent P and the uncle U are red, then both of them can be repainted black and the grandparent G becomes red for maintaining requirement 4. Since any path through the parent or uncle must pass through the grandparent, the number of black nodes on these paths has not changed. However, the grandparent G may now violate requirement 3, if it has a red parent. After relabeling G to N the loop invariant is fulfilled so that the rebalancing can be iterated on one black level (= 2 tree levels) higher. 

#### Insert case 3

Insert case 2 has been executed for <math-expression>{\tfrac {h-1}{2}}</math-expression> times and the total height of the tree has increased by 1, now being <math-expression>h~.</math-expression> The current node N is the (red) root of the tree, and all RB-properties are satisfied. 

#### Insert case 4

The parent P is red and the root. Because N is also red, requirement 3 is violated. But after switching P’s color the tree is in RB-shape. The black height of the tree increases by 1. 

#### Insert case 5

The parent P is red but the uncle U is black. The ultimate goal is to rotate the parent node P to the grandparent position, but this will not work if N is an "inner" grandchild of G (i.e., if N is the left child of the right child of G or the right child of the left child of G). A dir-rotation at P switches the roles of the current node N and its parent P. The rotation adds paths through N (those in the subtree labeled 2, see diagram) and removes paths through P (those in the subtree labeled 4). But both P and N are red, so requirement 4 is preserved. Requirement 3 is restored in case 6. 

#### Insert case 6

The current node N is now certain to be an "outer" grandchild of G (left of left child or right of right child). Now (1-dir)-rotate at G, putting P in place of G and making P the parent of N and G. G is black and its former child P is red, since requirement 3 was violated. After switching the colors of P and G the resulting tree satisfies requirement 3. Requirement 4 also remains satisfied, since all paths that went through the black G now go through the black P. 

Because the algorithm transforms the input without using an auxiliary data structure and using only a small amount of extra storage space for auxiliary variables it is in-place. 

### Removal: simple cases

The label N denotes the current node that at entry is the node to be deleted. 

If N is the root that does not have a non-NIL child, it is replaced by a NIL node, after which the tree is empty—and in RB-shape. 

If N has two non-NIL children, an additional navigation to either the maximum element in its left subtree (which is the in-order predecessor) or the minimum element in its right subtree (which is the in-order successor) finds a node with no other node in between (as shown here). This "replacement node", say R, has – as the maximal or minimal element of a subtree – at most one non-NIL child. In order to keep the software completely independent of the node structure as defined by the user, all red–black tree data related with N and R, i.e. the color of and the pointers to and from the two nodes, are exchanged. (The modified red–black tree is the same as before with the exception of the reversed order between N and R, an issue which immediately is resolved by the removal of N.) Now N has at most one non-NIL child. 

If N has exactly one non-NIL child, it must be a red child, because if it were a black one then requirement 4 would force a second black non-NIL child. 

If N is a red node, it cannot have a non-NIL child, because this would have to be black by requirement 3. Furthermore, it cannot have exactly one black child as argued just above. As a consequence, the red node N is without any child and can simply be removed. 

If N is a black node, it may have a red child or no non-NIL child at all. If N has a red child, it is simply replaced with this child after painting the latter black. 

### Removal of a black non-root leaf

The complex case is when N is not the root, colored black and has only NIL children (⇔ no proper child). In the first iteration, N is replaced by NIL. 

The rebalancing loop has the following invariant: 

  * At the beginning of each iteration the black height of N equals the iteration number minus one, which means that in the first iteration it is zero and that N is a true black node in higher iterations.
  * The number of black nodes on the paths through N is one less than before the deletion, whereas it is unchanged on all other paths, so that there is a black-violation at P if other paths exist.
  * All other properties (including requirement 3) are satisfied throughout the tree.

##### Delete case 1

P, S, and S’s children are black. After painting S red all paths passing through S, which are precisely those paths not passing through N, have one less black node. Now all paths in the subtree rooted by P have the same number of black nodes, but one fewer than the paths that do not pass through P, so requirement 4 may still be violated. After relabeling P to N the loop invariant is fulfilled so that the rebalancing can be iterated on one black level (= 1 tree level) higher. 

#### Delete case 2

The current node N is the new root. One black node has been removed from every path, so the RB-properties are preserved. The black height of the tree decreases by 1. 

#### Delete case 3

The sibling S is red, so P and the nephews C and D have to be black. A dir-rotation at P turns S into N’s grandparent. Then after reversing the colors of P and S, the path through N is still short one black node. But N has a red parent P and a black sibling S, so the transformations in cases D4, D5, or D6 are able to restore the RB-shape. 

#### Delete case 4

The sibling S and S’s children are black, but P is red. Exchanging the colors of S and P does not affect the number of black nodes on paths going through S, but it does add one to the number of black nodes on paths going through N, making up for the deleted black node on those paths. 

#### Delete case 5

The sibling S is black, S’s close child C is red, and S’s distant child D is black. After a (1-dir)-rotation at S the nephew C becomes S’s parent and N’s new sibling. The colors of S and C are exchanged. All paths still have the same number of black nodes, but now N has a black sibling whose distant child is red, so the constellation is fit for case D6. Neither N nor its parent P are affected by this transformation, and P may be red or black ( in the diagram). 

#### Delete case 6

The sibling S is black, S’s distant child D is red. After a dir-rotation at P the sibling S becomes the parent of P and S’s distant child D. The colors of P and S are exchanged, and D is made black. The subtree still has the same color at its root, namely either red or black ( in the diagram), which refers to the same color both before and after the transformation. This way requirement 3 is preserved. The paths in the subtree not passing through N (i.o.w. passing through D and node 3 in the diagram) pass through the same number of black nodes as before, but N now has one additional black ancestor: either P has become black, or it was black and S was added as a black grandparent. Thus, the paths passing through N pass through one additional black node, so that requirement 4 is restored and the total tree is in RB-shape. 

Because the algorithm transforms the input without using an auxiliary data structure and using only a small amount of extra storage space for auxiliary variables it is in-place. 

## Proof of bounds

For <math-expression>h\in \mathbb {N} </math-expression> there is a red–black tree of height <math-expression>h</math-expression> with 

    

nodes and there is no red–black tree of this tree height with fewer nodes—therefore it is minimal.  
Its black height is <math-expression>\lceil h/2\rceil </math-expression> (with black root) or for odd <math-expression>h</math-expression> (then with a red root) also <math-expression>(h-1)/2~.</math-expression>

Proof

For a red–black tree of a certain height to have minimal number of nodes, it has to have exactly one longest path with maximal number of red nodes, in order to achieve a maximal tree height with a minimal black height. Besides this path all other nodes have to be black. If a node is taken off this tree it either loses height or some RB property. 

The RB tree of height <math-expression>h=1</math-expression> with red root is minimal. This is in agreement with 

    <math-expression>m_{1}=2^{\lfloor (1+1)/2\rfloor }\!+\!2^{\lfloor 1/2\rfloor }\!\!-\!\!2=2^{1}\!+\!2^{0}\!\!-\!\!2=1~.</math-expression>

A minimal RB tree (RBh in figure 4) of height <math-expression>h>1</math-expression> has a root whose two child subtrees are of different height. The higher child subtree is also a minimal RB tree, RBh–1, containing also a longest path that defines its height <math-expression>h\!\!-\!\!1</math-expression>; it has <math-expression>m_{h-1}</math-expression> nodes and the black height <math-expression>\lfloor (h\!\!-\!\!1)/2\rfloor =:s.</math-expression> The other subtree is a perfect binary tree of (black) height <math-expression>s</math-expression> having <math-expression>2^{s}\!\!-\!\!1=2^{\lfloor (h-1)/2\rfloor }\!\!-\!\!1</math-expression> black nodes—and no red node. Then the number of nodes is by induction 

The graph of the function <math-expression>m_{h}</math-expression> is convex and piecewise linear with breakpoints at <math-expression>(h=2k\;|\;m_{2k}=2\cdot 2^{k}\!-\!2)</math-expression> where <math-expression>k\in \mathbb {N} .</math-expression> The function has been tabulated as <math-expression>m_{h}=</math-expression> A027383(h–1) for <math-expression>h\geq 1</math-expression> (sequence A027383 in the OEIS).

Solving the function for <math-expression>h</math-expression>

The inequality <math-expression>9>8=2^{3}</math-expression> leads to <math-expression>3>2^{3/2}</math-expression>, which for odd <math-expression>h</math-expression> leads to 

    <math-expression>m_{h}=3\cdot 2^{(h-1)/2}-2={\bigl (}3\cdot 2^{-3/2}{\bigr )}\cdot 2^{(h+2)/2}-2>2\cdot 2^{h/2}-2</math-expression>.

So in the even as well as the odd case, <math-expression>h</math-expression> is in the interval 

with <math-expression>n</math-expression> being the number of nodes.

Conclusion

A red–black tree with <math-expression>n</math-expression> nodes (keys) has tree height <math-expression>h\in O(\log n).</math-expression>

## Set operations and bulk operations

In addition to the single-element insert, delete and lookup operations, several set operations have been defined on red–black trees: union, intersection and set difference. Then fast bulk operations on insertions or deletions can be implemented based on these set functions. These set operations rely on two helper operations, Split and Join. With the new operations, the implementation of red–black trees can be more efficient and highly-parallelizable. In order to achieve its time complexities this implementation requires that the root is allowed to be either red or black, and that every node stores its own black height. 

  * Join: The function Join is on two red–black trees t1 and t2 and a key k, where t1 < k < t2, i.e. all keys in t1 are less than k, and all keys in t2 are greater than k. It returns a tree containing all elements in t1, t2 as well as k.

    If the two trees have the same black height, Join simply creates a new node with left subtree t1, root k and right subtree t2. If both t1 and t2 have black root, set k to be red. Otherwise k is set black.
    If the black heights are unequal, suppose that t1 has larger black height than t2 (the other case is symmetric). Join follows the right spine of t1 until a black node c, which is balanced with t2. At this point a new node with left child c, root k (set to be red) and right child t2 is created to replace c. The new node may invalidate the red–black invariant because at most three red nodes can appear in a row. This can be fixed with a double rotation. If double red issue propagates to the root, the root is then set to be black, restoring the properties. The cost of this function is the difference of the black heights between the two input trees.

  * Split: To split a red–black tree into two smaller trees, those smaller than key x, and those larger than key x, first draw a path from the root by inserting x into the red–black tree. After this insertion, all values less than x will be found on the left of the path, and all values greater than x will be found on the right. By applying Join, all the subtrees on the left side are merged bottom-up using keys on the path as intermediate nodes from bottom to top to form the left tree, and the right part is symmetric.

    For some applications, Split also returns a boolean value denoting if x appears in the tree. The cost of Split is <math-expression>O(\log n),</math-expression> order of the height of the tree. This algorithm actually has nothing to do with any special properties of a red–black tree, and may be used on any tree with a join operation, such as an AVL tree.

The join algorithm is as follows: 
    
    
    function joinRightRB(TL, k, TR):
        if (TL.color=black) and (TL.blackHeight=TR.blackHeight):
            return Node(TL,⟨k,red⟩,TR)
        T'=Node(TL.left,⟨TL.key,TL.color⟩,joinRightRB(TL.right,k,TR))
        if (TL.color=black) and (T'.right.color=T'.right.right.color=red):
            T'.right.right.color=black;
            return rotateLeft(T')
        return T' /* T''[recte T'] */
    
    function joinLeftRB(TL, k, TR):
      /* symmetric to joinRightRB */
    
    function join(TL, k, TR):
        if TL.blackHeight>TR.blackHeight:
            T'=joinRightRB(TL,k,TR)
            if (T'.color=red) and (T'.right.color=red):
                T'.color=black
            return T'
        if TR.blackHeight>TL.blackHeight:
            /* symmetric */
        if (TL.color=black) and (TR.color=black):
            return Node(TL,⟨k,red⟩,TR)
        return Node(TL,⟨k,black⟩,TR)
    

The split algorithm is as follows: 
    
    
    function split(T, k):
        if (T = nil) return (nil, false, nil)
        if (k = T.key) return (T.left, true, T.right)
        if (k < T.key):
            (L',b,R') = split(T.left, k)
            return (L',b,join(R',T.key,T.right))
        (L',b,R') = split(T.right, k)
        return (join(T.left,T.key,L'),b,T.right)
    

The union of two red–black trees t1 and t2 representing sets A and B, is a red–black tree t that represents A ∪ B. The following recursive function computes this union: 
    
    
    function union(t1, t2):
        if t1 = nil return t2
        if t2 = nil return t1
        (L1,b,R1)=split(t1,t2.key)
        proc1=start:
            TL=union(L1,t2.left)
        proc2=start:
            TR=union(R1,t2.right)
        wait all proc1,proc2
        return join(TL, t2.key, TR)
    

Here, split is presumed to return two trees: one holding the keys less its input key, one holding the greater keys. (The algorithm is non-destructive, but an in-place destructive version exists as well.) 

The algorithm for intersection or difference is similar, but requires the Join2 helper routine that is the same as Join but without the middle key. Based on the new functions for union, intersection or difference, either one key or multiple keys can be inserted to or deleted from the red–black tree. Since Split calls Join but does not deal with the balancing criteria of red–black trees directly, such an implementation is usually called the "join-based" implementation. 

The complexity of each of union, intersection and difference is <math-expression>O\left(m\log \left({n \over m}+1\right)\right)</math-expression> for two red–black trees of sizes <math-expression>m</math-expression> and <math-expression>n(\geq m)</math-expression>. This complexity is optimal in terms of the number of comparisons. More importantly, since the recursive calls to union, intersection or difference are independent of each other, they can be executed in parallel with a parallel depth <math-expression>O(\log m\log n)</math-expression>. When <math-expression>m=1</math-expression>, the join-based implementation has the same computational directed acyclic graph (DAG) as single-element insertion and deletion if the root of the larger tree is used to split the smaller tree. 

## Parallel algorithms

Parallel algorithms for constructing red–black trees from sorted lists of items can run in constant time or <math-expression>O(\log \log n)</math-expression> time, depending on the computer model, if the number of processors available is asymptotically proportional to the number <math-expression>n</math-expression> of items where <math-expression>n\to \infty </math-expression>. Fast search, insertion, and deletion parallel algorithms are also known.

The join-based algorithms for red–black trees are parallel for bulk operations, including union, intersection, construction, filter, map-reduce, and so on. 

### Parallel bulk operations

Basic operations like insertion, removal or update can be parallelised by defining operations that process bulks of multiple elements. It is also possible to process bulks with several basic operations, for example bulks may contain elements to insert and also elements to remove from the tree. 

The algorithms for bulk operations aren’t just applicable to the red–black tree, but can be adapted to other sorted sequence data structures as well, like the 2–3 tree, 2–3–4 tree and (a,b)-tree. In the following different algorithms for bulk insert will be explained, but the same algorithms can also be applied to removal and update. Bulk insert is an operation that inserts each element of a sequence <math-expression>I</math-expression> into a tree <math-expression>T</math-expression>. 

#### Join-based

This approach can be applied to every sorted sequence data structure that supports efficient join- and split-operations. The general idea is to split <math-expression>I</math-expression> and <math-expression>T</math-expression> in multiple parts and perform the insertions on these parts in parallel. 

  1. First the bulk <math-expression>I</math-expression> of elements to insert has to be sorted.
  2. After that, the algorithm splits <math-expression>I</math-expression> into <math-expression>k\in \mathbb {N} ^{+}</math-expression> parts <math-expression>\langle I_{1},\cdots ,I_{k}\rangle </math-expression> of about equal sizes.
  3. Next the tree <math-expression>T</math-expression> has to be split into <math-expression>k</math-expression> parts <math-expression>\langle T_{1},\cdots ,T_{k}\rangle </math-expression> in a way, so that for every <math-expression>j\in \mathbb {N} ^{+}|\,1\leq j<k</math-expression> following constraints hold: 
    1. <math-expression>{\text{last}}(I_{j})<{\text{first}}(T_{j+1})</math-expression>
    2. <math-expression>{\text{last}}(T_{j})<{\text{first}}(I_{j+1})</math-expression>
  4. Now the algorithm inserts each element of <math-expression>I_{j}</math-expression> into <math-expression>T_{j}</math-expression> sequentially. This step has to be performed for every <math-expression>j</math-expression>, which can be done by up to <math-expression>k</math-expression> processors in parallel.
  5. Finally, the resulting trees will be joined to form the final result of the entire operation.

Note that in Step 3 the constraints for splitting <math-expression>I</math-expression> assure that in Step 5 the trees can be joined again and the resulting sequence is sorted. 

  *   *   *   * The pseudo code shows a simple divide-and-conquer implementation of the join-based algorithm for bulk-insert. Both recursive calls can be executed in parallel. The join operation used here differs from the version explained in this article, instead join2 is used, which misses the second parameter k. 
    
    
    bulkInsert(T, I, k):
        I.sort()
        bulklInsertRec(T, I, k)
    
    bulkInsertRec(T, I, k):
        if k = 1:
            forall e in I: T.insert(e)
        else
            m := ⌊size(I) / 2⌋
            (T1, _, T2) := split(T, I[m])
            bulkInsertRec(T1, I[0 .. m], ⌈k / 2⌉)
                || bulkInsertRec(T2, I[m + 1 .. size(I) - 1], ⌊k / 2⌋)
            T ← join2(T1, T2)
    

##### Execution time

Sorting <math-expression>I</math-expression> is not considered in this analysis. 

This can be improved by using parallel algorithms for splitting and joining. In this case the execution time is <math-expression>\in O\left(\log |T|+{\frac {|I|}{k}}\log |T|\right)</math-expression>.

##### Work

#### Pipelining

Another method of parallelizing bulk operations is to use a pipelining approach. This can be done by breaking the task of processing a basic operation up into a sequence of subtasks. For multiple basic operations the subtasks can be processed in parallel by assigning each subtask to a separate processor. 

  1. First the bulk <math-expression>I</math-expression> of elements to insert has to be sorted.
  2. For each element in <math-expression>I</math-expression> the algorithm locates the according insertion position in <math-expression>T</math-expression>. This can be done in parallel for each element <math-expression>\in I</math-expression> since <math-expression>T</math-expression> won’t be mutated in this process. Now <math-expression>I</math-expression> has to be divided into subsequences <math-expression>S</math-expression> according to the insertion position of each element. For example <math-expression>s_{n,{\mathit {left}}}</math-expression> is the subsequence of <math-expression>I</math-expression> that contains the elements whose insertion position would be to the left of node <math-expression>n</math-expression>.
  3. The middle element <math-expression>m_{n,{\mathit {dir}}}</math-expression> of every subsequence <math-expression>s_{n,{\mathit {dir}}}</math-expression> will be inserted into <math-expression>T</math-expression> as a new node <math-expression>n'</math-expression>. This can be done in parallel for each <math-expression>m_{n,{\mathit {dir}}}</math-expression> since by definition the insertion position of each <math-expression>m_{n,{\mathit {dir}}}</math-expression> is unique. If <math-expression>s_{n,{\mathit {dir}}}</math-expression> contains elements to the left or to the right of <math-expression>m_{n,{\mathit {dir}}}</math-expression>, those will be contained in a new set of subsequences <math-expression>S</math-expression> as <math-expression>s_{n',{\mathit {left}}}</math-expression> or <math-expression>s_{n',{\mathit {right}}}</math-expression>.
  4. Now <math-expression>T</math-expression> possibly contains up to two consecutive red nodes at the end of the paths form the root to the leaves, which needs to be repaired. Note that, while repairing, the insertion position of elements <math-expression>\in S</math-expression> have to be updated, if the corresponding nodes are affected by rotations.  
If two nodes have different nearest black ancestors, they can be repaired in parallel. Since at most four nodes can have the same nearest black ancestor, the nodes at the lowest level can be repaired in a constant number of parallel steps.  
This step will be applied successively to the black levels above until <math-expression>T</math-expression> is fully repaired.
  5. The steps 3 to 5 will be repeated on the new subsequences until <math-expression>S</math-expression> is empty. At this point every element <math-expression>\in I</math-expression> has been inserted. Each application of these steps is called a stage. Since the length of the subsequences in <math-expression>S</math-expression> is <math-expression>\in O(|I|)</math-expression> and in every stage the subsequences are being cut in half, the number of stages is <math-expression>\in O(\log |I|)</math-expression>.  
Since all stages move up the black levels of the tree, they can be parallelised in a pipeline. Once a stage has finished processing one black level, the next stage is able to move up and continue at that level.
  *   *   *   *   *   *   *   *   * ##### Execution time

Sorting <math-expression>I</math-expression> is not considered in this analysis. Also, <math-expression>|I|</math-expression> is assumed to be smaller than <math-expression>|T|</math-expression>, otherwise it would be more efficient to construct the resulting tree from scratch. 

##### Work

## Popular culture

A red–black tree was referenced correctly in an episode of Missing as noted by Robert Sedgewick in one of his lectures:

    Jess: It was the red door again.  
Pollock: I thought the red door was the storage container.  
Jess: But it wasn’t red anymore, it was black.  
Antonio: So red turning to black means what?  
Pollock: Budget deficits, red ink, black ink.  
Antonio: It could be from a binary search tree. The red–black tree tracks every simple path from a node to a descendant leaf that has the same number of black nodes.  
Jess: Does that help you with the ladies?

